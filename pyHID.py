# -*- coding: utf-8 -*-
import random
# Form implementation generated from reading ui file 'pyqt.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys, os, serial, serial.tools.list_ports, warnings

import numpy as np
from PyQt5.QtCore import *
from PyQt5.QtGui import QColor
import time
from PyQt5.QtWidgets import *
from PyQt5.uic import loadUi
from PyQt5.QtGui import QIntValidator
from PyQt5 import QtGui, QtCore
from PyQt5 import QtWidgets
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
import serial.tools.list_ports as port_list
import argparse
import pandas as pd
import csv
import pathlib
import math

import resources
from serial.tools import list_ports
import re
import subprocess

import pywinusb.hid as hid
import refreshModule as rm
import hid
import datetime, threading

result = []
portindex = 0

USB_VENDOR = 0x0483
USB_PRODUCT = 0x5750


###########################################################################################################
# Serial Port Checks
###########################################################################################################
def serial_ports():
    global portindex

    if sys.platform.startswith('win'):
        ports = ['COM%s' % (i + 1) for i in range(256)]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        # this excludes your current terminal "/dev/tty"
        ports = glob.glob('/dev/tty[A-Za-z]*')
    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*')
    else:
        raise EnvironmentError('Unsupported platform')

    for port in ports:
        try:
            s = serial.Serial(port)
            s.close()
            result.append(port)
        except (OSError, serial.SerialException):
            pass

    ports = list(port_list.comports())
    for p in ports:
        if "STLink" in str(p):
            break
        else:
            portindex += 1

    return result


###########################################################################################################
# UART RX Thread.
###########################################################################################################
class Worker(QObject):
    finished = pyqtSignal()
    intReady = pyqtSignal(str)
    byteReady = pyqtSignal(list)

    @pyqtSlot()
    def __init__(self):
        super(Worker, self).__init__()
        self.working = True
        self.byte_request = True

    def give(self):
        return self.vault

    def work(self):
        print("work")
        while self.working:
            if ser.isOpen():
                # byte operartion
                if self.byte_request == True:
                    line = ser.read(122)
                # ASCII operation
                else:
                    line = ser.readline()
            else:
                line = b''

            if line != b'':
                time.sleep(0.1)

                databyte = list(line)

                self.vault = line
                # print("databyte: ",line)

                if self.byte_request == True:
                    self.byteReady.emit(databyte)
                    self.byte_request = False

                else:
                    self.intReady.emit(line.decode('utf-8'))

        self.finished.emit()


###########################################################################################################
# QT Main
###########################################################################################################
class qt(QMainWindow):
    def __init__(self):

        QMainWindow.__init__(self)
        self.graphWidget = pg.PlotWidget()
        loadUi('qt.ui', self)

        self.row = 0
        self.col = 0

        self.thread = None
        self.worker = None
        self.pushButton.clicked.connect(self.start_loop)
        self.pb_cfg1_wr.clicked.connect(self.send_cfg1)
        # self.pb_cfg2_wr.clicked.connect(self.send_cfg2)
        # self.pb_cfg3_wr.clicked.connect(self.send_cfg3)
        self.pb_cfg1_rd.clicked.connect(self.read_cfg1)
        # self.pb_cfg2_rd.clicked.connect(self.read_cfg2)
        # self.pb_cfg3_rd.clicked.connect(self.read_cfg3)
        self.pushBtnClicked = False
        self.CopyFlag = 0
        self.ConnectStatus = 0
        self.Port = "UART"
        self.values = []
        self.group = 'NONE'
        self.getAll = 0
        self.next_call = 0
        self.usb_working = 0
        self.device = 0
        self.buffer = []
        self.itrbuffer = []
        self.approve = 0
        self.status = 0
        self.graphStatus = 0
        self.datafresh = [[]]
        self.dataitr = []
        self.fgrarr = []

        # test
        self.R = 0
        self.G = 0
        self.B = 0
        self.i = 0
        self.itrdel = 0
        self.A = []
        self.B = []

        onlyInt = QIntValidator()
        onlyInt.setRange(-2147483640, 2147483640)
        self.lineEdit_CF1_1.setValidator(onlyInt)
        self.lineEdit_CF1_2.setValidator(onlyInt)
        self.lineEdit_CF1_3.setValidator(onlyInt)
        self.lineEdit_CF1_4.setValidator(onlyInt)
        self.lineEdit_CF1_5.setValidator(onlyInt)
        self.lineEdit_CF1_6.setValidator(onlyInt)
        self.lineEdit_CF1_7.setValidator(onlyInt)
        self.lineEdit_CF1_8.setValidator(onlyInt)
        self.lineEdit_CF1_9.setValidator(onlyInt)
        self.lineEdit_CF1_10.setValidator(onlyInt)
        self.lineEdit_CF1_11.setValidator(onlyInt)
        self.lineEdit_CF1_12.setValidator(onlyInt)
        self.lineEdit_CF1_13.setValidator(onlyInt)
        self.lineEdit_CF1_14.setValidator(onlyInt)
        self.lineEdit_CF1_15.setValidator(onlyInt)

        # self.lineEdit_CF2_1.setValidator(onlyInt)
        # self.lineEdit_CF2_2.setValidator(onlyInt)
        # self.lineEdit_CF2_3.setValidator(onlyInt)
        # self.lineEdit_CF2_4.setValidator(onlyInt)
        # self.lineEdit_CF2_5.setValidator(onlyInt)
        # self.lineEdit_CF2_6.setValidator(onlyInt)
        # self.lineEdit_CF2_7.setValidator(onlyInt)
        # self.lineEdit_CF2_8.setValidator(onlyInt)
        # self.lineEdit_CF2_9.setValidator(onlyInt)
        # self.lineEdit_CF2_10.setValidator(onlyInt)
        #
        # self.lineEdit_CF3_1.setValidator(onlyInt)
        # self.lineEdit_CF3_2.setValidator(onlyInt)
        # self.lineEdit_CF3_3.setValidator(onlyInt)
        # self.lineEdit_CF3_4.setValidator(onlyInt)
        # self.lineEdit_CF3_5.setValidator(onlyInt)
        # self.lineEdit_CF3_6.setValidator(onlyInt)
        # self.lineEdit_CF3_7.setValidator(onlyInt)
        # self.lineEdit_CF3_8.setValidator(onlyInt)
        # self.lineEdit_CF3_9.setValidator(onlyInt)
        # self.lineEdit_CF3_10.setValidator(onlyInt)

        # Custom fuction
        self.graphWidget.setBackground('w')
        self.graphWidget.showGrid(x=True, y=True)
        self.setButton.clicked.connect(lambda: self.setAll())
        self.startButton.clicked.connect(lambda: self.start())
        self.stopButton.clicked.connect(lambda: self.stop())
        self.test.clicked.connect(lambda: self.startplot_2())
        self.testStop.clicked.connect(lambda: self.stopplot_2())
        self.cleanButton.clicked.connect(lambda: self.cleanGraph())
        self.changeButton.clicked.connect(lambda: self.change())
        self.set.clicked.connect(lambda: self.setSPI())

        global result
        print("Available ports:" + str(serial_ports()))
        for x in range(len(result)):
            name = result[x]
            self.cb_Port.addItem(name)
        self.cb_Port.addItem("USB")

        self.cb_baudrate.addItem("9600")
        self.cb_baudrate.addItem("38400")
        self.cb_baudrate.addItem("57600")
        self.cb_baudrate.addItem("115200")
        self.cb_baudrate.addItem("230400")
        self.cb_baudrate.setCurrentIndex(3)

        # #UART / USB COMPORT
        # for port in list_ports.comports():
        #     if "USB" in port.hwid:
        #         print(f"Name: {port.name}")
        #         print(f"Description: {port.description}")
        #         print(f"Location: {port.location}")
        #         print(f"Product: {port.product}")
        #         print(f"Manufacturer: {port.manufacturer}")
        #         print(f"ID: {port.pid}")

    # ------------------------------------------------------------------------------
    # FOR DEBUGGING PURPOSES
    # ------------------------------------------------------------------------------
    def setSPI(self):
        print("in set")

        vault = str(self.worker.give(), 'utf-8')
        print("Vault 0: ", vault)
        vault = vault.replace("\r\n", "")
        vault = vault.split(";")
        print("Vault: ", vault)
        self.show_CF1_1.setText(vault[0])
        self.show_CF1_2.setText(vault[1])
        self.show_CF1_3.setText(vault[2])
        self.show_CF1_4.setText(vault[3])
        self.show_CF1_5.setText(vault[4])
        self.show_CF1_6.setText(vault[5])
        self.show_CF1_7.setText(vault[6])
        self.show_CF1_8.setText(vault[7])
        self.show_CF1_9.setText(vault[8])
        self.show_CF1_10.setText(vault[9])
        self.show_CF1_11.setText(vault[10])
        self.show_CF1_12.setText(vault[11])
        self.show_CF1_13.setText(vault[12])
        self.show_CF1_14.setText(vault[13])
        self.show_CF1_15.setText(vault[14])

    def cleanGraph(self):
        self.graphWidget.clear()

    # def graphStart(self):
    #     self.graphStatus = 1
    #     self.plotIterate()

    def graphStop(self):
        self.graphStatus = 0

    def change(self):
        self.menuVal = int(self.dropDown.currentText())
        self.fingers = int(self.FingersDropDown.currentText())
        for i in range(self.fingers):
            if len(self.fgrarr) < self.fingers:
                self.fgrarr.append([])
        print(self.fgrarr)
        self.itrdel = 0
        self.graphWidget.clear()
        self.A.clear()
        self.B.clear()

    def write_read_data(self):
        randarr = []
        randarr.clear()
        self.graphWidget.clear()
        # --------------------------------------------------------------
        for i in range (64):
            randarr.append(random.randint(0, 500))
        a = [0, 0]
        self.device.write(a)
        b = self.device.read(64)
        randarr += b
        print("receive: ", randarr)
        # --------------------------------------------------------------
        return randarr

    def stopplot_2(self):
        self.graphStatus = 0

    def startplot_2(self):
        self.graphStatus = 1
        print(self.fgrarr)
        self.plotIterate_2()

    def plotIterate_2(self):
        if self.graphStatus:
            self.plotting_2()
            self.timer = QTimer()
            self.timer.setSingleShot(False)
            self.timer.timeout.connect(self.plotIterate_2)
            self.timer.setInterval(1)
            self.timer.start()

    def plotting_2(self):
        self.graphWidget.clear()
        temparr = []
        print("fingers val: ", self.fingers)
        print("point val: ", self.menuVal)
        for x in range(self.fingers):
            for y in range(self.menuVal * 2):
                temparr.clear()
                for i in range(math.ceil(self.fingers * self.menuVal * 2 / 64)):
                    temparr += self.write_read_data()
                if len(self.fgrarr[x]) >= (self.menuVal * 2) + 2:
                    del self.fgrarr[x][:2]
                    break
                else:
                    self.fgrarr[x].append(temparr[y])
        self.drawplot_2(self.fgrarr)
        print("fgrarr: ", self.fgrarr)

    def drawplot_2(self, arr):
        purple = pg.mkPen(color=(102, 0, 204))
        red = pg.mkPen(color=(255, 0, 0))
        green = pg.mkPen(color=(0, 255, 0))
        blue = pg.mkPen(color=(0, 0, 255))
        black = pg.mkPen(color=(0, 0, 0))
        pink = pg.mkPen(color=(204, 121, 167))
        yellow = pg.mkPen(color=(240, 228, 66))
        lightblue = pg.mkPen(color=(66, 180, 223))
        lightgreen = pg.mkPen(color=(107, 192, 113))
        lightpurple = pg.mkPen(color=(255, 51, 255))
        f1 = [[], []]
        f2 = [[], []]
        f3 = [[], []]
        f4 = [[], []]
        f5 = [[], []]
        f6 = [[], []]
        f7 = [[], []]
        f8 = [[], []]
        f9 = [[], []]
        f10 = [[], []]
        rep = 0
        for i in range(self.menuVal * 2):
            if self.fingers > 0:
                if i % 2 == 0:
                    f1[0].append(arr[0][i])
                else:
                    f1[1].append(arr[0][i])
            if self.fingers > 1:
                if i % 2 == 0:
                    f2[0].append(arr[1][i])
                else:
                    f2[1].append(arr[1][i])
            if self.fingers > 2:
                if i % 2 == 0:
                    f3[0].append(arr[2][i])
                else:
                    f3[1].append(arr[2][i])
            if self.fingers > 3:
                if i % 2 == 0:
                    f4[0].append(arr[3][i])
                else:
                    f4[1].append(arr[3][i])
            if self.fingers > 4:
                if i % 2 == 0:
                    f5[0].append(arr[4][i])
                else:
                    f5[1].append(arr[4][i])
            if self.fingers > 5:
                if i % 2 == 0:
                    f6[0].append(arr[5][i])
                else:
                    f6[1].append(arr[5][i])
            if self.fingers > 6:
                if i % 2 == 0:
                    f7[0].append(arr[6][i])
                else:
                    f7[1].append(arr[6][i])
            if self.fingers > 7:
                if i % 2 == 0:
                    f8[0].append(arr[7][i])
                else:
                    f8[1].append(arr[7][i])
            if self.fingers > 8:
                if i % 2 == 0:
                    f9[0].append(arr[8][i])
                else:
                    f9[1].append(arr[8][i])
            if self.fingers > 9:
                if i % 2 == 0:
                    f10[0].append(arr[9][i])
                else:
                    f10[1].append(arr[9][i])
            rep += 1
            print("rep:",rep)
            if rep >= 2:
                if self.fingers > 0:
                    self.graphWidget.plot(f1[0], f1[1], pen=pg.mkPen(purple), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 1:
                    self.graphWidget.plot(f2[0], f2[1], pen=pg.mkPen(red), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 2:
                    self.graphWidget.plot(f3[0], f3[1], pen=pg.mkPen(green), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 3:
                    self.graphWidget.plot(f4[0], f4[1], pen=pg.mkPen(blue), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 4:
                    self.graphWidget.plot(f5[0], f5[1], pen=pg.mkPen(black), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 5:
                    self.graphWidget.plot(f6[0], f6[1], pen=pg.mkPen(pink), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 6:
                    self.graphWidget.plot(f7[0], f7[1], pen=pg.mkPen(yellow), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 7:
                    self.graphWidget.plot(f8[0], f8[1], pen=pg.mkPen(lightblue), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 8:
                    self.graphWidget.plot(f9[0], f9[1], pen=pg.mkPen(lightgreen), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                if self.fingers > 9:
                    self.graphWidget.plot(f10[0], f10[1], pen=pg.mkPen(lightpurple), symbol='o', symbolSize=10,
                                          symbolBrush=('b'))
                rep = 0
                print("------DRAW------")

    def stop(self):
        self.status = 0
        for i in range(int(self.col)):
            self.datafresh[i].clear()
        for x in range(int(self.col)):
            for y in range(int(self.row)):
                self.datafresh[x].append(0)

    def start(self):
        self.status = 1
        self.iterate()

    def refresh(self):
        print("refresh")
        for i in range(int(self.col)):
            self.datafresh[i].clear()
        print("starting")
        iter = 0
        temp = ""
        # fetch and retrive data part
        for i in range(math.ceil((int(self.col) * int(self.row)) / 64)):
            a = [0, 0]
            self.device.write(a)
            time.sleep(0.05)
            temp = self.device.read(65)
            time.sleep(0.1)

            # for i in range (64):
            #     temp += str(random.randint(0, 10))
            self.dataitr += temp
            print("buffer: ", self.itrbuffer, " data: ", self.dataitr)

        for x in range(int(self.col)):
            for y in range(int(self.row)):
                print("append")
                self.datafresh[x].append(self.dataitr[iter])
                iter += 1
        print("set")
        table = rm.TableModel(self.datafresh)
        self.tableView.setModel(table)
        self.dataitr.clear()

    def iterate(self):
        if self.status:
            self.refresh()
            self.timer = QTimer()
            self.timer.setSingleShot(False)
            self.timer.timeout.connect(self.iterate)
            self.timer.setInterval(1)
            self.timer.start()

    def setAll(self):
        self.datafresh.clear()
        self.row = self.textEdit_Row.toPlainText()
        self.col = self.textEdit_Column.toPlainText()
        if self.row == "":
            self.row = 1
        if self.col == "":
            self.col = 1
        for i in range(int(self.col)):
            self.datafresh.append([])
        print("SET: ", self.datafresh)
        self.setTable()
        data = rm.TableModel(self.datafresh)
        self.tableView.setModel(data)

    def setTable(self):
        for x in range(int(self.col)):
            for i in range(int(self.row)):
                self.datafresh[x].append(0)
                print("B: ", self.datafresh)

    # def setColor(self):
    #     for x in range(self.row):
    #         for y in range(self.col):
    #             item_color = QTableWidgetItem()
    #             item_color.setBackground(self.get_rgb_from_hex("#41CD52"))
    #             self.tableWidget.setItem(x, y, item_color)

    ###########################################################################################################
    # WRITE CF1 array values
    ##########################################################################################################
    def send_cfg1(self):
        print("send cfg1")
        if self.ConnectStatus == 0:
            return

        cfg1text = "{CF1:" + \
                   ('0' if (self.lineEdit_CF1_1.text() == '') else self.lineEdit_CF1_1.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_2.text() == '') else self.lineEdit_CF1_2.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_3.text() == '') else self.lineEdit_CF1_3.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_4.text() == '') else self.lineEdit_CF1_4.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_5.text() == '') else self.lineEdit_CF1_5.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_6.text() == '') else self.lineEdit_CF1_6.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_7.text() == '') else self.lineEdit_CF1_7.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_8.text() == '') else self.lineEdit_CF1_8.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_9.text() == '') else self.lineEdit_CF1_9.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_10.text() == '') else self.lineEdit_CF1_10.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_11.text() == '') else self.lineEdit_CF1_11.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_12.text() == '') else self.lineEdit_CF1_12.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_13.text() == '') else self.lineEdit_CF1_13.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_14.text() == '') else self.lineEdit_CF1_14.text()) + ';' + \
                   ('0' if (self.lineEdit_CF1_15.text() == '') else self.lineEdit_CF1_15.text()) + '}\r\n'

        blueColor = QColor(0, 0, 255)
        self.textEdit_3.setTextColor(blueColor)
        self.textEdit_3.append(str(cfg1text))
        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)

        ser.write(cfg1text.encode())
        self.pushBtnClicked = True

    ###########################################################################################################
    # WRITE CF2 array values
    ###########################################################################################################
    def send_cfg2(self):
        print("send cfg2")
        if self.ConnectStatus == 0:
            return

        cfg2text = "{CF2:" + \
                   ('0' if (self.lineEdit_CF2_1.text() == '') else self.lineEdit_CF2_1.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_2.text() == '') else self.lineEdit_CF2_2.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_3.text() == '') else self.lineEdit_CF2_3.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_4.text() == '') else self.lineEdit_CF2_4.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_5.text() == '') else self.lineEdit_CF2_5.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_6.text() == '') else self.lineEdit_CF2_6.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_7.text() == '') else self.lineEdit_CF2_7.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_8.text() == '') else self.lineEdit_CF2_7.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_9.text() == '') else self.lineEdit_CF2_7.text()) + ',' + \
                   ('0' if (self.lineEdit_CF2_10.text() == '') else self.lineEdit_CF2_10.text()) + '}\r\n'

        blueColor = QColor(0, 0, 255)
        self.textEdit_3.setTextColor(blueColor)
        self.textEdit_3.append(str(cfg2text))
        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)

        ser.write(cfg2text.encode())
        self.pushBtnClicked = True

    ###########################################################################################################
    # WRITE CF3 array values
    ###########################################################################################################
    def send_cfg3(self):
        print("send cfg3")
        if self.ConnectStatus == 0:
            return

        cfg3text = "{CF3:" + \
                   ('0' if (self.lineEdit_CF3_1.text() == '') else self.lineEdit_CF3_1.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_2.text() == '') else self.lineEdit_CF3_2.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_3.text() == '') else self.lineEdit_CF3_3.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_4.text() == '') else self.lineEdit_CF3_4.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_5.text() == '') else self.lineEdit_CF3_5.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_6.text() == '') else self.lineEdit_CF3_6.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_7.text() == '') else self.lineEdit_CF3_7.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_8.text() == '') else self.lineEdit_CF3_8.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_9.text() == '') else self.lineEdit_CF3_9.text()) + ',' + \
                   ('0' if (self.lineEdit_CF3_10.text() == '') else self.lineEdit_CF3_10.text()) + '}\r\n'

        blueColor = QColor(0, 0, 255)
        self.textEdit_3.setTextColor(blueColor)
        self.textEdit_3.append(str(cfg3text))
        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)

        ser.write(cfg3text.encode())
        self.pushBtnClicked = True

    ###########################################################################################################
    # READ CF1 array values
    ###########################################################################################################
    def read_cfg1(self):
        print("read cfg1")
        if self.ConnectStatus == 0:
            return

        blueColor = QColor(0, 0, 255)
        self.textEdit_3.setTextColor(blueColor)
        cfg1text = "{RD1}\r\n"
        self.textEdit_3.append(str(cfg1text))
        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)
        ser.write(cfg1text.encode())
        self.pushBtnClicked = True

    ###########################################################################################################
    # READ CF2 array values
    ###########################################################################################################
    def read_cfg2(self):
        print("read cfg2")
        if self.ConnectStatus == 0:
            return

        blueColor = QColor(0, 0, 255)
        self.textEdit_3.setTextColor(blueColor)
        cfg2text = "{RD2}\r\n"
        self.textEdit_3.append(str(cfg2text))
        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)

        ser.write(cfg2text.encode())
        self.pushBtnClicked = True
        self.textedit_4

    ###########################################################################################################
    # READ CF3 array values
    ###########################################################################################################
    def read_cfg3(self):
        print("read cfg3")
        if self.ConnectStatus == 0:
            return

        blueColor = QColor(0, 0, 255)
        self.textEdit_3.setTextColor(blueColor)
        cfg3text = "{RD3}\r\n"
        self.textEdit_3.append(str(cfg3text))
        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)

        ser.write(cfg3text.encode())
        self.pushBtnClicked = True

    ###########################################################################################################
    # UART LOOP FINISH
    ###########################################################################################################
    def loop_finished(self):
        print('Loop Finished')

    ###########################################################################################################
    # Clear Config when disconnect
    ###########################################################################################################
    def clear_disconnect(self):
        self.lineEdit_CF1_1.clear()
        self.lineEdit_CF1_2.clear()
        self.lineEdit_CF1_3.clear()
        self.lineEdit_CF1_4.clear()
        self.lineEdit_CF1_5.clear()
        self.lineEdit_CF1_6.clear()
        self.lineEdit_CF1_7.clear()
        self.lineEdit_CF1_8.clear()
        self.lineEdit_CF1_9.clear()
        self.lineEdit_CF1_10.clear()

        # self.lineEdit_CF2_1.clear()
        # self.lineEdit_CF2_2.clear()
        # self.lineEdit_CF2_3.clear()
        # self.lineEdit_CF2_4.clear()
        # self.lineEdit_CF2_5.clear()
        # self.lineEdit_CF2_6.clear()
        # self.lineEdit_CF2_7.clear()
        # self.lineEdit_CF2_8.clear()
        # self.lineEdit_CF2_9.clear()
        # self.lineEdit_CF2_10.clear()
        #
        # self.lineEdit_CF3_1.clear()
        # self.lineEdit_CF3_2.clear()
        # self.lineEdit_CF3_3.clear()
        # self.lineEdit_CF3_4.clear()
        # self.lineEdit_CF3_5.clear()
        # self.lineEdit_CF3_6.clear()
        # self.lineEdit_CF3_7.clear()
        # self.lineEdit_CF3_8.clear()
        # self.lineEdit_CF3_9.clear()
        # self.lineEdit_CF3_10.clear()

        redColor = QColor(255, 0, 0)
        self.textEdit_3.setTextColor(redColor)
        endText = "\r\n=============================== DISCONNECTED ===============================\r\n"
        self.textEdit_3.append(endText)

        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)

    ###########################################################################################################
    # Stop UART RX Loop.
    ###########################################################################################################
    def stop_loop(self):
        print('stop loop')
        self.worker.working = False
        self.label_5.setText("Not Connected")
        self.label_5.setStyleSheet('color: red')
        ser.close()

    ###########################################################################################################
    # USB HID Data handler.
    ###########################################################################################################
    def hid_usb_handler(self):
        self.next_call = time.time()

        while self.usb_working:
            if self.approve:
                if self.textEdit_cmd1.toPlainText()[0:5] == "{USB:":
                    self.approve = 0
                    print(datetime.datetime.now())
                    self.next_call = self.next_call + 1

                    print(self.buffer)
                    self.device.write(self.buffer)
                    # self.device.write([64, 10, 25, 25] + [0] * 61)
                    # self.device.write([0, 25, 25])
                    # wait
                    time.sleep(0.05)

                    # get data from ST
                    data = self.device.read(65)
                    if data:
                        print(data)
                    else:
                        print("read fail")
                    print(self.buffer)
                    self.buffer.clear()
                    # time.sleep(self.next_call - time.time())
                    time.sleep(0.1)

    ###########################################################################################################
    # Start UART RX / USB Loop
    ###########################################################################################################
    def start_loop(self):
        print('start loop')
        global ser

        # Disconnect
        if (self.ConnectStatus == 1):
            self.ConnectStatus = 0
            self.clear_disconnect()
            self.pushButton.setText("CONNECT")
            self.label_5.setText("Not Connected")
            self.label_5.setStyleSheet('color: red')

            if (self.Port == "UART"):
                self.stop_loop()
            else:
                self.usb_working = 0
                self.device.close()
            return

        # Verify the correct COM Port
        try:
            mytext = "{RDA}\r\n"  # Get all config values
            self.getAll = 0

            if (self.cb_Port.currentText() == "USB"):
                print("USB HID Communication")
                self.Port = "USB"
            else:
                self.Port = "UART"

                ser = serial.Serial(self.cb_Port.currentText(), self.cb_baudrate.currentText(), timeout=1)
                ser.write(mytext.encode())

            if (self.ConnectStatus == 0):
                self.ConnectStatus = 1
                self.pushButton.setText("DISCONNECT")
                self.label_5.setText("Connected Via " + self.Port)
                self.label_5.setStyleSheet('color: black')

        except:
            msgBox = QMessageBox()
            msgBox.setWindowTitle("COM Port Error!")
            msgBox.setIcon(QMessageBox.Warning)
            msgBox.setText("Selected COM port does not exist. Please verify the COM port Number.")
            msgBox.exec()
            self.label_5.setText("Not Connected")
            self.label_5.setStyleSheet('color: red')
            print('start loop')
            return

        else:
            redColor = QColor(255, 0, 0)
            self.textEdit_3.setTextColor(redColor)
            startText = "\r\n================================ CONNECTED ================================\r\n"
            self.textEdit_3.append(startText)

            blueColor = QColor(0, 0, 255)
            self.textEdit_3.setTextColor(blueColor)
            self.textEdit_3.append(mytext)
            blackColor = QColor(0, 0, 0)
            self.textEdit_3.setTextColor(blackColor)

        if (self.Port == "UART"):

            self.worker = Worker()
            self.thread = QThread()
            self.worker.moveToThread(self.thread)

            self.thread.started.connect(self.worker.work)

            self.worker.intReady.connect(self.onIntReady)
            self.worker.byteReady.connect(self.onByteReady)

            self.worker.finished.connect(self.loop_finished)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)
            self.thread.start()
        else:
            print("USB Thread here")

            # wmi = win32com.client.GetObject("winmgmts:")
            # for usb in wmi.InstancesOf("Win32_USBHub"):
            #     print(usb.DeviceID)

            # all_hids = hid.find_all_hid_devices()
            # if all_hids:
            #     print("Available HID devices:")
            #     for hid_device in all_hids:
            #         print("vId={0:04X}, pId= {1:04X}".format(
            #             hid_device.vendor_id, hid_device.product_id))
            #
            #         if hid_device.vendor_id == USB_VENDOR and hid_device.product_id == USB_PRODUCT:
            #             print("USB Dongle found!!!")
            #             hid_device.open()
            #             hid_device.set_raw_data_handler(self.hid_data_handler)
            #             break
            # else:
            #     print("No HID USB devices attached now")

            self.device = hid.device()
            self.device.open(0x0483, 0x5750)  # DONGLE VendorID/ProductID
            print("Manufacturer: %s" % self.device.get_manufacturer_string())
            print("Product: %s" % self.device.get_product_string())
            print("Serial No: %s" % self.device.get_serial_number_string())

            # enable non-blocking mode
            self.device.set_nonblocking(1)

            self.usb_working = 1

            timerThread = threading.Thread(target=self.hid_usb_handler)
            timerThread.daemon = True
            timerThread.start()

    ###########################################################################################################
    # Parse incoming uart msg from STM32
    ###########################################################################################################
    def parseSerialMsg(self, str):
        # print(str)

        # remove leading and trailing edge spaces of each item of the list
        # result = [value.strip() for value in str.split(':')[1].split(',')]
        result = [value.strip() for value in str.split(':')[1].replace('}', '').split(',')]

        # for idx in result:
        #    print(idx)

        return result

    ###########################################################################################################
    # Serial (in bytes) Receiving Packets
    ###########################################################################################################
    def onByteReady(self, data):
        # print("onByteReady")
        # print(data)
        int_val = []

        if data[0] == 16 and data[1] == 17:
            print("byte header OK")

            for x in range(0, 81):
                start = (x * 4) + 2
                end = start + 4
                res = int.from_bytes(data[start:end], "little")
                if res > 2147483647:
                    res = res - 4294967296
                int_val.append(res)

            # for x in range(0, 30):
            #    print(int_val[x])

            self.lineEdit_CF1_1.setText(str(int_val[0]))
            self.lineEdit_CF1_2.setText(str(int_val[1]))
            self.lineEdit_CF1_3.setText(str(int_val[2]))
            self.lineEdit_CF1_4.setText(str(int_val[3]))
            self.lineEdit_CF1_5.setText(str(int_val[4]))
            self.lineEdit_CF1_6.setText(str(int_val[5]))
            self.lineEdit_CF1_7.setText(str(int_val[6]))
            self.lineEdit_CF1_8.setText(str(int_val[7]))
            self.lineEdit_CF1_9.setText(str(int_val[8]))
            self.lineEdit_CF1_10.setText(str(int_val[9]))

            self.lineEdit_CF2_1.setText(str(int_val[10]))
            self.lineEdit_CF2_2.setText(str(int_val[11]))
            self.lineEdit_CF2_3.setText(str(int_val[12]))
            self.lineEdit_CF2_4.setText(str(int_val[13]))
            self.lineEdit_CF2_5.setText(str(int_val[14]))
            self.lineEdit_CF2_6.setText(str(int_val[15]))
            self.lineEdit_CF2_7.setText(str(int_val[16]))
            self.lineEdit_CF2_8.setText(str(int_val[17]))
            self.lineEdit_CF2_9.setText(str(int_val[18]))
            self.lineEdit_CF2_10.setText(str(int_val[19]))

            self.lineEdit_CF3_1.setText(str(int_val[20]))
            self.lineEdit_CF3_2.setText(str(int_val[21]))
            self.lineEdit_CF3_3.setText(str(int_val[22]))
            self.lineEdit_CF3_4.setText(str(int_val[23]))
            self.lineEdit_CF3_5.setText(str(int_val[24]))
            self.lineEdit_CF3_6.setText(str(int_val[25]))
            self.lineEdit_CF3_7.setText(str(int_val[26]))
            self.lineEdit_CF3_8.setText(str(int_val[27]))
            self.lineEdit_CF3_9.setText(str(int_val[28]))
            self.lineEdit_CF3_10.setText(str(int_val[29]))

    ###########################################################################################################
    # Serial (in utf-8) Receiving Packets
    ###########################################################################################################
    def onIntReady(self, i):
        print('SerialRead')

        if i != '':
            self.textEdit_3.append("{}".format(i))
            self.group = i.split(':')

            if len(self.group) == 2:
                self.values = self.parseSerialMsg(i)

                if self.group[0] == '{CF1' and len(self.values) >= 10:
                    self.lineEdit_CF1_1.setText(self.values[0])
                    self.lineEdit_CF1_2.setText(self.values[1])
                    self.lineEdit_CF1_3.setText(self.values[2])
                    self.lineEdit_CF1_4.setText(self.values[3])
                    self.lineEdit_CF1_5.setText(self.values[4])
                    self.lineEdit_CF1_6.setText(self.values[5])
                    self.lineEdit_CF1_7.setText(self.values[6])
                    self.lineEdit_CF1_8.setText(self.values[7])
                    self.lineEdit_CF1_9.setText(self.values[8])
                    self.lineEdit_CF1_10.setText(self.values[9])

                    if self.getAll == 1:
                        blueColor = QColor(0, 0, 255)
                        self.textEdit_3.setTextColor(blueColor)
                        cfg2text = "{RD2}\r\n"
                        self.textEdit_3.append(str(cfg2text))
                        blackColor = QColor(0, 0, 0)
                        self.textEdit_3.setTextColor(blackColor)

                        ser.write(cfg2text.encode())
                        self.pushBtnClicked = True

                if self.group[0] == '{CF2' and len(self.values) >= 10:
                    self.lineEdit_CF2_1.setText(self.values[0])
                    self.lineEdit_CF2_2.setText(self.values[1])
                    self.lineEdit_CF2_3.setText(self.values[2])
                    self.lineEdit_CF2_4.setText(self.values[3])
                    self.lineEdit_CF2_5.setText(self.values[4])
                    self.lineEdit_CF2_6.setText(self.values[5])
                    self.lineEdit_CF2_7.setText(self.values[6])
                    self.lineEdit_CF2_8.setText(self.values[7])
                    self.lineEdit_CF2_9.setText(self.values[8])
                    self.lineEdit_CF2_10.setText(self.values[9])

                    if self.getAll == 1:
                        self.getAll = 0

                        blueColor = QColor(0, 0, 255)
                        self.textEdit_3.setTextColor(blueColor)
                        cfg3text = "{RD3}\r\n"
                        self.textEdit_3.append(str(cfg3text))
                        blackColor = QColor(0, 0, 0)
                        self.textEdit_3.setTextColor(blackColor)

                        ser.write(cfg3text.encode())
                        self.pushBtnClicked = True

                if self.group[0] == '{CF3' and len(self.values) >= 10:
                    self.lineEdit_CF3_1.setText(self.values[0])
                    self.lineEdit_CF3_2.setText(self.values[1])
                    self.lineEdit_CF3_3.setText(self.values[2])
                    self.lineEdit_CF3_4.setText(self.values[3])
                    self.lineEdit_CF3_5.setText(self.values[4])
                    self.lineEdit_CF3_6.setText(self.values[5])
                    self.lineEdit_CF3_7.setText(self.values[6])
                    self.lineEdit_CF3_8.setText(self.values[7])
                    self.lineEdit_CF3_9.setText(self.values[8])
                    self.lineEdit_CF3_10.setText(self.values[9])

    ###########################################################################################################
    # Get CF1 Form Value in byte
    ###########################################################################################################
    def getCF1values_inbytes(self):
        returnByte = bytearray()

        mytextInt = int(self.lineEdit_CF1_1.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_2.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_3.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_4.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_5.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_6.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_7.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_8.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_9.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF1_10.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        return returnByte

    ###########################################################################################################
    # Get CF2 Form Value in byte
    ###########################################################################################################
    def getCF2values_inbytes(self):
        returnByte = bytearray()

        mytextInt = int(self.lineEdit_CF2_1.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_2.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_3.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_4.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_5.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_6.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_7.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_8.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_9.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF2_10.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        return returnByte

    ###########################################################################################################
    # Get CF3 Form Value in byte
    ###########################################################################################################
    def getCF3values_inbytes(self):
        returnByte = bytearray()

        mytextInt = int(self.lineEdit_CF3_1.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_2.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_3.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_4.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_5.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_6.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_7.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_8.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_9.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        mytextInt = int(self.lineEdit_CF3_10.text())
        returnByte.extend(mytextInt.to_bytes(4, 'big', signed=True))

        return returnByte

    ###########################################################################################################
    # TXT Save
    ###########################################################################################################
    def on_pushButton_5_clicked(self):
        if self.pushBtnClicked:
            self.pushBtnClicked = False
            return

        fileName = QFileDialog.getSaveFileName(self, 'Select location to Log', "", '*.txt')
        if not fileName:
            return

        with open(fileName[0], 'w') as f:
            my_text = self.textEdit_3.toPlainText()
            f.write(my_text)

        self.textEdit_3.append("Log Saved in :" + fileName[0] + "\r\n")
        self.pushBtnClicked = True

    def on_pushButton_2_clicked(self):
        self.textEdit.setText('Stopped! Please click CONNECT...')

    def on_pb_Clr_clicked(self):
        if self.pushBtnClicked:
            self.pushBtnClicked = False
            return

        self.textEdit_3.setText('')

    ###########################################################################################################
    # Clear UART console history
    ###########################################################################################################
    def on_pb_Clr_clicked(self):
        if self.pushBtnClicked:
            self.pushBtnClicked = False
            return

        self.textEdit_3.setText('')

    ###########################################################################################################
    # READ CMD BUTTON
    ###########################################################################################################
    def on_pushButton_4_clicked(self):
        print('Read All Value')
        print("Connect Status: ", self.ConnectStatus)
        if self.ConnectStatus == 0:
            return
        if self.textEdit_cmd2.toPlainText == "":
            print("cmd2 print")
            redColor = QColor(255, 0, 0)
            self.textEdit_3.setTextColor(redColor)
            self.textEdit_3.append("Please input command by following this rule, \"{CF:0;1}\"")
        print("inside")
        spiTxt = self.textEdit_cmd2.toPlainText()
        ser.write(bytearray(spiTxt, 'ascii'))
        time.sleep(0.5)
        self.spiRcv = ser.readline().decode('ascii')
        blackColor = QColor(0, 0, 0)
        self.textEdit_3.setTextColor(blackColor)
        self.textEdit_3.append(self.spiRcv)

        # Send data from serial port:
        # if self.pushBtnClicked:
        #     self.pushBtnClicked = False
        #     return
        #
        # mytext = "{RDA}\r\n"
        # ser.flushInput()
        #
        # blueColor = QColor(0, 0, 255)
        # self.textEdit_3.setTextColor(blueColor)
        # self.textEdit_3.append(mytext)
        # blackColor = QColor(0, 0, 0)
        # self.textEdit_3.setTextColor(blackColor)
        #
        # self.worker.byte_request = True
        # ser.write(mytext.encode())
        # self.pushBtnClicked = True

    ###########################################################################################################
    # IMPORT BUTTON
    ###########################################################################################################
    def on_pb_import_clicked(self):
        if self.pushBtnClicked:
            self.pushBtnClicked = False
            return
        else:
            self.pushBtnClicked = True

        filter = "CSV (*.csv);;Excel (*.xls, *.xlsx)"
        path = QFileDialog.getOpenFileName(self, 'Open CSV', os.getenv('HOME'), filter)

        file_extension = pathlib.Path(str(path)).suffix
        file_extension = file_extension.replace(")", "").replace("'", "")
        print(file_extension)

        if path[0] != '':
            if file_extension == '.csv':
                with open(path[0], newline='') as csv_file:
                    csv_reader = csv.reader(csv_file, delimiter=',')

                    line_count = 0
                    for row in csv_reader:
                        if line_count == 0:
                            column = ",\t".join(row)
                            print(f'column are: {column}')
                            line_count += 1

                        elif line_count == 1:
                            self.lineEdit_CF1_1.setText(row[0])
                            self.lineEdit_CF1_2.setText(row[1])
                            self.lineEdit_CF1_3.setText(row[2])
                            self.lineEdit_CF1_4.setText(row[3])
                            self.lineEdit_CF1_5.setText(row[4])
                            self.lineEdit_CF1_6.setText(row[5])
                            self.lineEdit_CF1_7.setText(row[6])
                            self.lineEdit_CF1_8.setText(row[7])
                            self.lineEdit_CF1_9.setText(row[8])
                            self.lineEdit_CF1_10.setText(row[9])
                            line_count += 1

                        elif line_count == 2:
                            self.lineEdit_CF2_1.setText(row[0])
                            self.lineEdit_CF2_2.setText(row[1])
                            self.lineEdit_CF2_3.setText(row[2])
                            self.lineEdit_CF2_4.setText(row[3])
                            self.lineEdit_CF2_5.setText(row[4])
                            self.lineEdit_CF2_6.setText(row[5])
                            self.lineEdit_CF2_7.setText(row[6])
                            self.lineEdit_CF2_8.setText(row[7])
                            self.lineEdit_CF2_9.setText(row[8])
                            self.lineEdit_CF2_10.setText(row[9])
                            line_count += 1

                        elif line_count == 3:
                            self.lineEdit_CF3_1.setText(row[0])
                            self.lineEdit_CF3_2.setText(row[1])
                            self.lineEdit_CF3_3.setText(row[2])
                            self.lineEdit_CF3_4.setText(row[3])
                            self.lineEdit_CF3_5.setText(row[4])
                            self.lineEdit_CF3_6.setText(row[5])
                            self.lineEdit_CF3_7.setText(row[6])
                            self.lineEdit_CF3_8.setText(row[7])
                            self.lineEdit_CF3_9.setText(row[8])
                            self.lineEdit_CF3_10.setText(row[9])
                            line_count += 1

                        else:
                            print(
                                f'Param1: {row[0]}, Param2: {row[1]}, Param3: {row[2]}, Param4: {row[3]}, Param5: {row[4]},'
                                f'Param6: {row[5]}, Param7: {row[6]}, Param8: {row[7]}, Param9: {row[8]}, Param10: {row[9]}')
                            line_count += 1
                    print(f'Processed {line_count} lines.')

            elif file_extension == '.xls' or file_extension == '.xlsx':
                print("xls or xlsx file")
                df = pd.read_excel(path[0], sheet_name='1900s', usecols=['Params', 'Values'])
                value = df.values.tolist()

                self.lineEdit_CF1_1.setText(str(int(value[0][1])))
                self.lineEdit_CF1_2.setText(str(int(value[1][1])))
                self.lineEdit_CF1_3.setText(str(int(value[2][1])))
                self.lineEdit_CF1_4.setText(str(int(value[3][1])))
                self.lineEdit_CF1_5.setText(str(int(value[4][1])))
                self.lineEdit_CF1_6.setText(str(int(value[5][1])))
                self.lineEdit_CF1_7.setText(str(int(value[6][1])))
                self.lineEdit_CF1_8.setText(str(int(value[7][1])))
                self.lineEdit_CF1_9.setText(str(int(value[8][1])))
                self.lineEdit_CF1_10.setText(str(int(value[9][1])))

                self.lineEdit_CF2_1.setText(str(int(value[10][1])))
                self.lineEdit_CF2_2.setText(str(int(value[11][1])))
                self.lineEdit_CF2_3.setText(str(int(value[12][1])))
                self.lineEdit_CF2_4.setText(str(int(value[13][1])))
                self.lineEdit_CF2_5.setText(str(int(value[14][1])))
                self.lineEdit_CF2_6.setText(str(int(value[15][1])))
                self.lineEdit_CF2_7.setText(str(int(value[16][1])))
                self.lineEdit_CF2_8.setText(str(int(value[17][1])))
                self.lineEdit_CF2_9.setText(str(int(value[18][1])))
                self.lineEdit_CF2_10.setText(str(int(value[19][1])))

                self.lineEdit_CF3_1.setText(str(int(value[20][1])))
                self.lineEdit_CF3_2.setText(str(int(value[21][1])))
                self.lineEdit_CF3_3.setText(str(int(value[22][1])))
                self.lineEdit_CF3_4.setText(str(int(value[23][1])))
                self.lineEdit_CF3_5.setText(str(int(value[24][1])))
                self.lineEdit_CF3_6.setText(str(int(value[25][1])))
                self.lineEdit_CF3_7.setText(str(int(value[26][1])))
                self.lineEdit_CF3_8.setText(str(int(value[27][1])))
                self.lineEdit_CF3_9.setText(str(int(value[28][1])))
                self.lineEdit_CF3_10.setText(str(int(value[29][1])))

    ###########################################################################################################
    # Export BUTTON
    ###########################################################################################################
    def on_pb_export_clicked(self):
        if self.pushBtnClicked:
            self.pushBtnClicked = False
            return
        else:
            self.pushBtnClicked = True

        path = QFileDialog.getSaveFileName(self, 'Save CSV', os.getenv('HOME'), 'CSV(*.csv)')
        if path[0] != '':
            with open(path[0], 'w', newline='', encoding='utf-8') as csv_file:
                csv_data = csv.writer(csv_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                csv_data.writerow(['PARAM 1', 'PARAM 2', 'PARAM 3', 'PARAM 4', 'PARAM 5',
                                   'PARAM 6', 'PARAM 7', 'PARAM 8', 'PARAM 9', 'PARAM 10'])
                csv_data.writerow([self.lineEdit_CF1_1.text(), self.lineEdit_CF1_2.text(), self.lineEdit_CF1_3.text(),
                                   self.lineEdit_CF1_4.text(), self.lineEdit_CF1_5.text(), self.lineEdit_CF1_6.text(),
                                   self.lineEdit_CF1_7.text(), self.lineEdit_CF1_8.text(), self.lineEdit_CF1_9.text(),
                                   self.lineEdit_CF1_10.text()])
                csv_data.writerow([self.lineEdit_CF2_1.text(), self.lineEdit_CF2_2.text(), self.lineEdit_CF2_3.text(),
                                   self.lineEdit_CF2_4.text(), self.lineEdit_CF2_5.text(), self.lineEdit_CF2_6.text(),
                                   self.lineEdit_CF2_7.text(), self.lineEdit_CF2_8.text(), self.lineEdit_CF2_9.text(),
                                   self.lineEdit_CF2_10.text()])
                csv_data.writerow([self.lineEdit_CF3_1.text(), self.lineEdit_CF3_2.text(), self.lineEdit_CF3_3.text(),
                                   self.lineEdit_CF3_4.text(), self.lineEdit_CF3_5.text(), self.lineEdit_CF3_6.text(),
                                   self.lineEdit_CF3_7.text(), self.lineEdit_CF3_8.text(), self.lineEdit_CF3_9.text(),
                                   self.lineEdit_CF3_10.text()])

    ###########################################################################################################
    # SEND CMD BUTTON
    ###########################################################################################################
    def on_pushButton_3_clicked(self):
        print('Send to USB')

        if self.ConnectStatus == 0:
            return

        # Send data from serial port:
        if self.pushBtnClicked:
            self.pushBtnClicked = False
            return

        # if text edit is empty then send write command to update CF3 using byte methods
        if self.textEdit_cmd1.toPlainText() == '':
            msgBox = QMessageBox()
            msgBox.setWindowTitle("Warning!!!")
            msgBox.setIcon(QMessageBox.Warning)
            msgBox.setText("All Config Value are over written")
            msgBox.exec()

            bufferByte = bytearray("{CFA:", 'utf-8')
            bufferByte.extend(self.getCF1values_inbytes())
            bufferByte.extend(self.getCF2values_inbytes())
            bufferByte.extend(self.getCF3values_inbytes())

            footer = bytearray("{\r\n", 'utf-8')
            bufferByte.extend(footer)
            print(bufferByte)

            print(len(bufferByte))
            ser.write(bufferByte)

        # send input command by user in text edit 2
        # Available command are: {MSG:, {CF1:, {CF2:, {CF3:, {CFA:, {RD1}, {RD2}, {RD3}, {RD4}, {RDA}
        elif self.usb_working:
            mytext = self.textEdit_cmd1.toPlainText()  # dari SEND CMD 1
            buffertext = (mytext[5:len(mytext) - 1])  # motong header n kurawal akhir
            buffertext = buffertext.split(",")  # jadi array
            self.buffer.append(0)  # add 0 diawal karena ga kebaca
            self.itrbuffer.append(0)
            for i in range(len(buffertext)):
                self.buffer.append(int(buffertext[i]))
                self.itrbuffer.append(int(buffertext[i]))
            blueColor = QColor(0, 0, 255)
            self.textEdit_3.setTextColor(blueColor)
            self.textEdit_3.append(mytext)
            blackColor = QColor(0, 0, 0)
            self.textEdit_3.setTextColor(blackColor)

            # ser.write(mytext.encode())
            # self.buffer = buffertext
            self.approve = 1
        self.pushBtnClicked = True


##################################################################################################
# QT RUN
##################################################################################################
def run():
    app = QApplication(sys.argv)
    widget = qt()
    widget.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    run()
